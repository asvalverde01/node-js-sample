name: CI/CD Pipeline

on:
  push:
    # Se activa el workflow cuando hay un push a la rama 'master'
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # (1) Descargar el código
      - name: Checkout Code
        uses: actions/checkout@v2

      # (2) Configurar Node.js 14
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      # (3) Configurar Java 17 (para SonarCloud)
      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # (4) Verificar la versión de Java
      - name: Check Java Version
        run: java -version

      # (5) Instalar dependencias
      - name: Install Dependencies
        run: npm install

      # (6) Ejecutar pruebas unitarias
      - name: Run Tests
        run: npm test

      # (7) Análisis de código con SonarCloud usando la acción oficial
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v1.10
        with:
          organization: 'tu_organizacion'          # Reemplaza con tu organización
          projectKey: 'tu_proyecto_key'            # Reemplaza con tu project key
          projectName: 'node-js-sample'            # Opcional: nombre de tu proyecto
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # (8) Construir la imagen Docker
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/node-js-sample:latest .

      # (9) Subir la imagen a Docker Hub
      - name: Push to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/node-js-sample:latest

      # (10) Escanear vulnerabilidades con Trivy
      - name: Scan with Trivy
        uses: aquasecurity/trivy-action@v0.7.0
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/node-js-sample:latest

  deploy-to-test:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Deploy to Test Environment
        run: |
          echo "Desplegando en entorno de pruebas (simulado)."
          # Aquí puedes usar Docker Compose, Kubernetes, o cualquier script de despliegue real:
          # docker-compose -f docker-compose.test.yml up -d
          # kubectl apply -f k8s/test-deployment.yml
          echo "Despliegue de pruebas completado (simulado)."

  deploy-to-production:
    runs-on: ubuntu-latest
    needs: deploy-to-test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Validate Deployment Policies (OPA)
        run: |
          echo "Validando Políticas con Open Policy Agent (OPA)."
          # Ejemplo:
          # opa eval --data ./policies/ --input ./input.json "data.example_policy.allow"
          echo "Políticas validadas satisfactoriamente (simulado)."

      - name: Deploy to Production (Simulated)
        run: |
          echo "Desplegando en producción (simulado)."
          # Nuevamente, aquí irían los comandos reales de despliegue
          echo "Despliegue en producción completado (simulado)."
