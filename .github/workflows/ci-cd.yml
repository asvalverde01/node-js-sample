name: CI/CD Pipeline

on:
  push:
    branches:
      - master  # Asegúrate de que la rama sea 'master'

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # (1) Descargar el código
      - name: Checkout Code
        uses: actions/checkout@v2

      # (2) Configurar Node.js 14
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      # (3) Instalar dependencias
      - name: Install Dependencies
        run: npm install

      # (4) Ejecutar pruebas unitarias
      - name: Run Tests
        run: npm test

      # (5) Análisis de código con CodeQL
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      # (6) Construir la imagen Docker
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/node-js-sample:latest .

      # (7) Subir la imagen a Docker Hub
      - name: Push to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/node-js-sample:latest

      # (8) Escanear vulnerabilidades con Snyk
      - name: Snyk Scan
        uses: snyk/actions@v1  # Actualizado a v1
        with:
          args: container test ${{ secrets.DOCKER_USERNAME }}/node-js-sample:latest --file=Dockerfile
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  deploy-to-test:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Deploy to Test Environment
        run: |
          echo "Desplegando en entorno de pruebas (simulado)."
          # Aquí puedes usar Docker Compose, Kubernetes, o cualquier script de despliegue real:
          # docker-compose -f docker-compose.test.yml up -d
          # kubectl apply -f k8s/test-deployment.yml
          # etc.
          echo "Despliegue de pruebas completado (simulado)."

  deploy-to-production:
    runs-on: ubuntu-latest
    needs: deploy-to-test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Validar Políticas de Despliegue (OPA)
        run: |
          echo "Validando Políticas con Open Policy Agent (OPA)."
          # Ejemplo:
          # opa eval --data ./policies/ --input ./input.json "data.example_policy.allow"
          echo "Políticas validadas satisfactoriamente (simulado)."

      - name: Desplegar en Producción (Simulado)
        run: |
          echo "Desplegando en producción (simulado)."
          # Nuevamente, aquí irían los comandos reales de despliegue
          echo "Despliegue en producción completado (simulado)."
