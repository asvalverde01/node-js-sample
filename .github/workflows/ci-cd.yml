name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # 1. Descargar el código
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. Configurar Node.js 18 (actualizado desde 14)
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'  # Actualizado a Node.js 18

      # 3. Instalar dependencias
      - name: Install Dependencies
        run: npm install

      # 4. Ejecutar pruebas unitarias
      - name: Run Tests
        run: npm test

      # 5. Ejecutar ESLint para análisis estático de código
      - name: Run ESLint
        run: npx eslint .

      # 6. Construir la imagen Docker
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/node-js-sample:latest .

      # 7. Iniciar sesión en Docker Hub y subir la imagen
      - name: Push to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/node-js-sample:latest

      # 8. Escanear vulnerabilidades con Trivy
      - name: Scan with Trivy
        uses: aquasecurity/trivy-action@v0.28.0  # Versión válida de la acción
        with:
          version: 'v0.57.1'  # Versión del binario Trivy
          image-ref: ${{ secrets.DOCKER_USERNAME }}/node-js-sample:latest
          format: 'table'
          exit-code: '1'    # Falla si hay vulnerabilidades con esa severidad
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  deploy-to-test:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Deploy to Test Environment
        run: |
          echo "Desplegando en entorno de pruebas (simulado)."
          # Aquí puedes usar Docker Compose, Kubernetes, u otros scripts de despliegue real:
          # Ejemplo con Docker Compose:
          # docker-compose -f docker-compose.test.yml up -d
          echo "Despliegue de pruebas completado (simulado)."

  deploy-to-production:
    runs-on: ubuntu-latest
    needs: deploy-to-test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Validate Deployment Policies (OPA)
        run: |
          echo "Validando Políticas con Open Policy Agent (OPA) - Simulado."
          # Ejemplo: opa eval --data ./policies/ --input ./input.json "data.example_policy.allow"
          echo "Políticas validadas satisfactoriamente (simulado)."

      - name: Deploy to Production (Simulated)
        run: |
          echo "Desplegando en un entorno de producción (simulado)."
          echo "Despliegue en producción completado (simulado)."
