name: CI/CD Pipeline

# Evento que disparará el pipeline: cada push a la rama main
on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    # Se ejecutará en un contenedor Ubuntu de GitHub Actions
    runs-on: ubuntu-latest

    steps:
      # 1. Descarga el código del repositorio
      - name: Checkout Code
        uses: actions/checkout@v2

      # 2. Configura la versión de Node.js
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: 14

      # 3. Instala dependencias y ejecuta pruebas
      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        run: npm test

      # 4. Análisis de código con SonarCloud
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@v1.6
        with:
          args: >
            -Dsonar.projectKey=tu_proyecto_key
            -Dsonar.organization=tu_organizacion
            -Dsonar.host.url=https://sonarcloud.io
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # 5. Construye la imagen Docker
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/node-js-sample:latest .

      # 6. Inicia sesión en Docker Hub y realiza el push de la imagen
      - name: Push to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/node-js-sample:latest

      # 7. Escanea la imagen Docker con Trivy para verificar vulnerabilidades
      - name: Scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/node-js-sample:latest

  # Despliegue a Entorno de Pruebas
  deploy-to-test:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Deploy to Test Environment
        run: |
          echo "Simulando despliegue en un entorno de pruebas..."
          # Aquí podrías agregar:
          # - Comandos para iniciar un contenedor en un servidor de staging
          # - kubectl apply -f test-deployment.yml
          # - docker-compose -f docker-compose.test.yml up -d
          # O cualquier proceso que desees para tu entorno de pruebas

  # Validación de Políticas y Despliegue a Producción Simulada
  deploy-to-production:
    runs-on: ubuntu-latest
    needs: deploy-to-test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Validate Deployment Policies (OPA)
        run: |
          echo "Validando Políticas con Open Policy Agent (OPA) - Ejemplo"
          # Ejemplo de ejecución con OPA (debes configurar tus políticas .rego):
          # opa eval --data ./policies/ --input ./input.json "data.example_policy.allow"

      - name: Deploy to Production (Simulated)
        run: |
          echo "Desplegando en un entorno de producción simulado..."
          # Aquí podrías agregar:
          # - kubectl apply -f production-deployment.yml
          # - docker-compose -f docker-compose.production.yml up -d
          # - Scripts de infraestructura
